#!/usr/bin/env python3
"""Generate README.md for PRs directory with status table"""

import json
import glob
from pathlib import Path
from datetime import datetime

def load_json(filepath):
    """Load JSON file safely"""
    try:
        with open(filepath, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return None

def format_pr_row(pr_dir_path, metadata):
    """Format a single PR as a table row"""
    pr_number = Path(pr_dir_path).name

    # Extract fields with defaults
    title = metadata.get('title', 'Unknown')
    author = metadata.get('author', 'Unknown')
    status = metadata.get('status', 'open')
    build_status = metadata.get('build_status', 'unknown')
    last_updated = metadata.get('last_updated', 'Unknown')
    last_commit = metadata.get('last_commit', 'Unknown')[:10] if metadata.get('last_commit') else 'Unknown'

    # Format date if it's a timestamp
    if last_updated != 'Unknown':
        try:
            dt = datetime.fromisoformat(last_updated.replace('Z', '+00:00'))
            last_updated = dt.strftime('%Y-%m-%d')
        except:
            pass

    # GitHub PR URL
    pr_url = f"https://github.com/bids-standard/bids-specification/pull/{pr_number}"

    # Schema path (relative to PRs directory)
    schema_path = f"./{pr_number}/schema.json"

    # Status emoji
    status_emoji = {
        'open': 'üü¢',
        'merged': 'üü£',
        'closed': 'üî¥'
    }.get(status, '‚ö™')

    # Build status indicator and actions
    actions = f"[View PR]({pr_url}) \\| [Schema]({schema_path})"

    if build_status == 'failed':
        build_indicator = '‚ùå'
        error_msg = metadata.get('error_message', 'Build failed')
        # Truncate error message for table
        if len(error_msg) > 50:
            error_msg = error_msg[:47] + '...'
        title = f"{title} (Error: {error_msg})"
        # Add error log link if available
        if metadata.get('error_log'):
            actions += f" \\| [Error Log](./{pr_number}/bst-output.log)"
    elif build_status == 'success':
        build_indicator = '‚úÖ'
    else:
        build_indicator = '‚ùì'

    return f"| {pr_number} | {title} | {author} | {status_emoji} {status.title()} | {build_indicator} | {last_updated} | {last_commit} | {actions} |"

def generate_markdown_table(pr_dirs):
    """Generate the markdown table for all PRs"""
    if not pr_dirs:
        return "*No PR schemas currently available*\n"

    # Table header
    table = "| PR # | Title | Author | Status | Build | Schema Updated | Last Commit | Actions |\n"
    table += "|------|-------|--------|--------|-------|----------------|-------------|---------|"

    # Sort PR directories by number
    pr_dirs_sorted = sorted(pr_dirs, key=lambda x: int(Path(x).name) if Path(x).name.isdigit() else 0)

    for pr_dir in pr_dirs_sorted:
        metadata = load_json(f"{pr_dir}/PR_METADATA.json")
        if metadata:
            table += "\n" + format_pr_row(pr_dir, metadata)

    return table

def generate_pr_readme():
    """Generate the complete README.md for PRs directory"""
    readme_content = """# BIDS Specification PR Schemas

This directory contains automatically generated schemas from Pull Requests to the BIDS specification
that modify the schema files.

## Overview

Each subdirectory corresponds to a Pull Request (PR) number and contains:
- `schema.json` - The compiled BIDS schema (only file stored to save space)
- `PR_METADATA.json` - Metadata about the PR and processing status

## Active PR Schemas

"""

    # Find all PR directories
    pr_dirs = glob.glob("PRs/[0-9]*")

    # Add status counts
    if pr_dirs:
        open_count = 0
        merged_count = 0
        closed_count = 0

        for pr_dir in pr_dirs:
            metadata = load_json(f"{pr_dir}/PR_METADATA.json")
            if metadata:
                status = metadata.get('status', 'open')
                if status == 'open':
                    open_count += 1
                elif status == 'merged':
                    merged_count += 1
                elif status == 'closed':
                    closed_count += 1

        readme_content += f"**Status Summary:** üü¢ Open ({open_count}) | üü£ Merged ({merged_count}) | üî¥ Closed ({closed_count})\n\n"

    # Generate table
    readme_content += generate_markdown_table(pr_dirs)

    # Add footer
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
    readme_content += f"""

## How to Use PR Schemas

1. **Accessing a schema**: Navigate to `PRs/{{pr_number}}/schema.json`
2. **Checking metadata**: View `PRs/{{pr_number}}/PR_METADATA.json` for processing details
3. **Raw schema files**: Not stored (only compiled schema.json saved to reduce repository size)

## Update Frequency

PR schemas are automatically updated:
- Every 12 hours via scheduled GitHub Actions
- On manual workflow dispatch
- When changes are pushed to the main branch

## Related Resources

- [BEP Schemas](../BEPs/) - BIDS Extension Proposal schemas
- [Released Versions](../versions/) - Official BIDS schema releases
- [BIDS Specification Repository](https://github.com/bids-standard/bids-specification)

---

*Last generated: {timestamp}*
"""

    # Write the README
    Path("PRs/README.md").write_text(readme_content)
    print(f"Generated PRs/README.md with {len(pr_dirs)} PR schemas")

if __name__ == "__main__":
    generate_pr_readme()