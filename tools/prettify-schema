#!/usr/bin/env python3
"""Pretty-print a schema.json file to schema_pp.json with proper indentation"""

import json
import sys
from pathlib import Path

def prettify_schema(base_path):
    """Convert {base_path}.json to {base_path}_pp.json with indent=2"""
    base_path = Path(base_path)

    # Remove .json extension if present to get base path
    if base_path.suffix == '.json':
        base_path = base_path.with_suffix('')

    # Handle paths that might end up empty after processing
    if not base_path.name:
        print(f"Error: Invalid base path {base_path}", file=sys.stderr)
        return False

    schema_file = base_path.with_suffix('.json')
    pretty_file = Path(str(base_path) + '_pp.json')

    if not schema_file.exists():
        print(f"Error: {schema_file} does not exist", file=sys.stderr)
        return False

    try:
        # Read the schema
        with open(schema_file, 'r') as f:
            schema_data = json.load(f)

        # Write pretty-printed version
        with open(pretty_file, 'w') as f:
            json.dump(schema_data, f, indent=2, sort_keys=True)

        print(f"Created {pretty_file}")
        return True

    except json.JSONDecodeError as e:
        print(f"Error: Invalid JSON in {schema_file}: {e}", file=sys.stderr)
        return False
    except Exception as e:
        print(f"Error processing {schema_file}: {e}", file=sys.stderr)
        return False

def main():
    if len(sys.argv) != 2:
        print("Usage: prettify-schema <base-path-without-extension>", file=sys.stderr)
        print("  Creates {base-path}_pp.json from {base-path}.json", file=sys.stderr)
        print("  Example: prettify-schema schema  # reads schema.json, creates schema_pp.json", file=sys.stderr)
        sys.exit(1)

    base_path = sys.argv[1]
    success = prettify_schema(base_path)
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()